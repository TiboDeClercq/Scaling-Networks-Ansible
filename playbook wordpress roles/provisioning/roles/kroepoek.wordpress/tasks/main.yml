---
#Op voorhand downloaden zodat je geen verassingen hebt
- name: Copy wordpress.zip into tmp
  copy: src=wordpress.zip dest=/tmp/wordpress.zip
#Of dynamisch de laatste versie downloaden
#- name: Download WordPress
#get_url: url=https://wordpress.org/latest.zip dest=/tmp/wordpress.zip
#checksum: "sha1:{{wp_checksum.content}}"
           
- name: Unzip WordPress
  #copy=no zorgt ervoor dat locaal gezocht wordt op de target machine naar wordpress.zip
  unarchive: src=/tmp/wordpress.zip dest=/tmp copy=no creates=/tmp/wordpress/wp-settings.php

  #Copy files voor nginx
- name: Create project folder
  file: dest=/var/www/book.example.com state=directory
- name: Copy WordPress files
  command: cp -a /tmp/wordpress/. /var/www/book.example.com creates=/var/www/book.example.com/wp-settings.php

- name: Create WordPress MySQL database
  mysql_db: name={{database_name}} state=present
- name: Create WordPress MySQL user
  mysql_user: name={{database_user}} host=localhost password={{database_password}} priv={{database_name}}.*:ALL

  #Na het doorgeven van info over het schema aan WP
- name: Create wp-config
  template: src=wp-config.php dest=/var/www/book.example.com/wp-config.php

  #eerst backup maken in /root/files/...
- name: Is the database empty?
  command: mysql -u root {{database_name}} -e "SELECT ID FROM {{database_name}}.wp_users LIMIT 1;"
  register: db_ok
  #Dit onderbreekt niet de uitvoer van dit playbook bij falen
  ignore_errors: true
  #true => change has been made dus voer uit; false=> geen veranderingen, dus niet uitgevoerd
  changed_when: false

- name: Copy WordPress DB
  copy: src=/root/files/wp-database.sql dest=/tmp/wp-database.sql remote_src=yes
  #rc staat voor return code; bij goede uitvoer is de rc altijd 0
  when: db_ok.rc > 0

- name: Import WordPress DB
  mysql_db: target=/tmp/wp-database.sql state=import name={{database_name}}
  when: db_ok.rc > 0
